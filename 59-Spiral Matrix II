class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int> > result(n, vector<int>(n,0)); 
        if(n==0)
                return result;
        vector<vector<int> > one(1, vector<int>(1,1));
        if(n==1)
                return one;
                
        int moves=0,ind=1,x=0,y=0;
        
        while(true){
            result[x][y] = ind++;
            if(!canMove(x,y,moves,result,n))
                break;
        }
        
        return result;
    }
    
    bool canMove(int &x,int &y,int &moves,vector<vector<int>> &result,int n){
        int changed=0;
        if(moves%4==0){
            if((y+1==n)||result[x][y+1]){
                moves++;
                changed=1;
                x+=1;
            }else{
               y+=1; 
            }
        }else if(moves%4==1){
              if((x+1==n)||result[x+1][y]){
                moves++;changed=1;
                y-=1;
            }else{
              x+=1;
            }
           
        }else if(moves%4==2){
             if((y==0)||result[x][y-1]){
                moves++;changed=1;
                x-=1;
            }else{
              y-=1;
            }
        }else{
             if((x==0)||result[x-1][y]){
                moves++;changed=1;
                y+=1;
            }else{
              x-=1;
            }
        }
        
        
         if(result[x][y]){
          return false;
        }else{
            return true;
        }
    }
};
